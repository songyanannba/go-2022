package main

import "fmt"

//在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
//请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
/*[
	[1,4, 7, 11, 15],
	[2, 5,  8, 12, 19],
	[3, 6,  9, 16, 22],
	[10, 13, 14, 17, 24-gin],
	[18, 21, 23, 26, 30]
]*/
/**
思路：
	题中说了每行都是递增的，每列也是递增的。所以我们查找的时候可以利用这个特性，如果我们从左上角开始找，
	当目标值target大于当前值的时候，我们需要往更大的找，但这个时候无论往右找还是往下找都是比当前值大，
	所以我们无法确定该往哪个方向找。同理右下角也一样，所以我们只能从右上角或者左下角开始找。
	我们就用上面的数据当target等于23的时候从右上角开始找
*/

func main() {

	arr2 := [5][5]int{
		{1, 4, 7, 11, 15},
		{2, 5, 8, 12, 19},
		{3, 6, 9, 16, 22},
		{10, 13, 14, 17, 24},
		{18, 21, 23, 26, 30},
	}

	sss(arr2, 23)
}

func sss(arr [5][5]int, a int) {
	rows := len(arr)
	cols := len(arr[0])

	row := 0
	col := cols -1

	for row < rows && col >= 0 {
		num := arr[row][col]
		if num == a {
			fmt.Println("true。。。")
			return
			break
		} else if num > a {
			col--
		} else {
			row++
		}
	}
	fmt.Println("f。。。")
}
